mutate(domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if there is no NUTS2
filter(!(domain == 99999)) # delete NAs
lookup <- read.csv(text = URL)
class(lookup$nuts2)
class(lookup$nuts3)
ess2 <- ess %>%
left_join(lookup, by = c("region" = "nuts3")) %>% # merge NUTS3 data into ESS dataframe
rename(domain = nuts2) %>% # rename NUTS2 variable
filter(!(domain == 99999)) # delete NAs
table(ess2$domain)
ess2 <- ess %>%
left_join(lookup, by = c("region" = "nuts3")) %>% # merge NUTS3 data into ESS dataframe
rename(domain = nuts2) %>% # rename NUTS2 variable
mutate(domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if there is no NUTS2
filter(!(domain == 99999)) # delete NAs
table(ess2$domain)
ess2 <- ess%>%
left_join(lookup, by = "regio" = "nuts3")
ess2 <- ess%>%
left_join(lookup, by = "regio" = "nuts3")
ess2 <- ess%>%
left_join(lookup, by = "region" = "nuts3")
ess2 <- ess%>%
left_join(lookup, by = ("region" = "nuts3"))
lookup <- read.csv(text = URL)
ess2 <- ess%>%
dplyr::left_join(lookup, by = ("region" = "nuts3"))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3"))
table(ess2$nuts2)
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%
rename(domain = nuts2)
table(ess2$domain)
ess2$domain
ess2 <- ess%>%
ess2 <- ess%>%
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%
rename(domain = nuts2) %>%
mutate(domain = ifelse(is.na(domain), region, domain))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%
rename(domain = nuts2) %>%
mutate(domain = ifelse(is.na(domain), region, domain))
table(ess2$domain)
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%
rename(domain = nuts2)
class(ess2$domain)
class(ess2$region)
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%
rename(domain = nuts2) %>%
mutate(region = as.factor(region),
domain = ifelse(is.na(domain), region, domain))
table(ess2$domain)
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%
rename(domain = nuts2) %>%
mutate(domain = as.character(domain),
domain = ifelse(is.na(domain), region, domain))
table(ess2$domain)
table(is.na(ess2$domain))
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
mutate(domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if there is no NUTS2
filter(!(domain == 99999))                                 # delete NAs
domains <- table(ess$domain)
table(ess$domain)
ess <- import_rounds(rounds = 8, ess_email = NULL, format = NULL)
# if value of trust in police is above or equal to the mean, assign 1, otherwise 0
ess <- ess %>%
mutate(trstplc = ifelse(trstplc >= mean(trstplc, na.rm = T), 1, 0))
ess %>%
group_by(regunit, cntry) %>% # group by spatial scale and country
summarize(n = n())           # print sample size per country
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
table(ess$domain)
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/population.csv")
pop <- read.csv(text = URL)
View(pop)
# sum of weights per region
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
View(ess_w_area)
View(pop)
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
ess <- ess %>%
left_join(ess_w_area, by = "domain") %>%   # merge sum of weights with ESS units
mutate(weight = pspwght * pweight,         # compute weights for cross-national analysis
weight = (weight * values) / w_sum) # recalibrate weights to population sample size
ess2 <- ess %>%
left_join(ess_w_area, by = "domain") %>%   # merge sum of weights with ESS units
left_join(pop, by = "domain") %>%          # merge region population sizes
mutate(weight = pspwght * pweight,         # compute weights for cross-national analysis
weight = (weight * pop2014) / w_sum) # recalibrate weights to population sample size
ess2 <- ess %>%
left_join(ess_w_area, by = "domain") %>%                 # merge sum of weights with ESS units
left_join(pop, by = c("domain" = "X.U.FEFF.domain")) %>% # merge region population sizes
mutate(weight = pspwght * pweight,                       # compute weights for cross-national analysis
weight = (weight * pop2014) / w_sum)              # recalibrate weights to population sample size
pop2 <- pop %>%
mutate(area = 1:n()) %>% # create numeric id value
subset(pop, select = c(1, 3, 2)) # reorder columns
pop2 <- pop %>%
mutate(area = 1:n()) %>% # create numeric id value
subset(select = c(1, 3, 2)) # reorder columns
View(pop2)
pop <- pop %>%
mutate(area = 1:n()) %>% # create numeric id value
subset(select = c(1, 3, 2)) # reorder columns
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>% # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>%
subset(select = c(1, 3, 2)) # reorder columns
ess2 <- ess %>%
left_join(ess_w_area, by = "domain") %>%                 # merge sum of weights with ESS units
left_join(pop, by = c("domain" = "X.U.FEFF.domain")) %>% # merge region population sizes
mutate(weight = pspwght * pweight,                       # compute weights for cross-national analysis
weight = (weight * pop2014) / w_sum)              # recalibrate weights to population sample size
ess2 <- ess %>%
left_join(ess_w_area, by = "domain") %>%                 # merge sum of weights with ESS units
left_join(pop, by = "domain") %>% # merge region population sizes
mutate(weight = pspwght * pweight,                       # compute weights for cross-national analysis
weight = (weight * pop2014) / w_sum)              # recalibrate weights to population sample size
summary(ess2$weight)
comp <- ess_w_area %>%
left_join(pop, by = "domain")
View(comp)
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/population.csv")
pop <- read.csv(text = URL)
View(pop)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
comp <- ess_w_area %>%
left_join(pop, by = "domain")
ess <- import_rounds(rounds = 8, ess_email = NULL, format = NULL)
table(ess$region)
# if value of trust in police is above or equal to the mean, assign 1, otherwise 0
ess <- ess %>%
mutate(trstplc = ifelse(trstplc >= mean(trstplc, na.rm = T), 1, 0))
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
lookup <- read.csv(text = URL)
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
table(ess$domain)
table(ess$region)
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
lookup <- read.csv(text = URL)
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
recode(domain, "SI01" = "SI0", "SI02" = "SI0") %>%         # recode Slovenia to NUTS1
filter(!(domain == 99999))
table(ess$domain == "SI01")
table(ess$domain == "SI02")
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
dplyr::recode(domain, "SI01" = "SI0", "SI02" = "SI0") %>%         # recode Slovenia to NUTS1
filter(!(domain == 99999))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain),     # copy NUTS1 data if no NUTS2 information
domain = recode(domain, "SI01" = "SI0", "SI02" = "SI0")) %>% # recode Slovenia to NUTS1
filter(!(domain == 99999))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain),     # copy NUTS1 data if no NUTS2 information
domain = recode(domain, "SI01" = "SI0")) %>% # recode Slovenia to NUTS1
filter(!(domain == 99999))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain),     # copy NUTS1 data if no NUTS2 information
domain = recode(domain, "SI0" = "SI01")) %>% # recode Slovenia to NUTS1
filter(!(domain == 99999))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain),     # copy NUTS1 data if no NUTS2 information
domain = dplyr::recode(domain, "SI0" = "SI01")) %>% # recode Slovenia to NUTS1
filter(!(domain == 99999))
ess <- import_rounds(rounds = 8, ess_email = NULL, format = NULL)
# if value of trust in police is above or equal to the mean, assign 1, otherwise 0
ess <- ess %>%
mutate(trstplc = ifelse(trstplc >= mean(trstplc, na.rm = T), 1, 0))
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
lookup <- read.csv(text = URL)
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/population.csv")
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
ess2 <- ess %>%
left_join(ess_w_area, by = "domain") %>%                 # merge sum of weights with ESS units
left_join(pop, by = "domain") %>% # merge region population sizes
mutate(weight = pspwght * pweight,                       # compute weights for cross-national analysis
weight = (weight * pop2014) / w_sum)              # recalibrate weights to population sample size
View(pop)
ess2 <- ess %>%
left_join(ess_w_area, by = "domain") %>%                 # merge sum of weights with ESS units
left_join(pop, by = "domain") %>% # merge region population sizes
mutate(weight = pspwght * pweight,                       # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum)              # recalibrate weights to population sample size
comp <- ess_w_area %>%
left_join(pop, by = "domain")
View(comp)
ess2 <- ess %>%
recode(region, "SI01" = "SI0")
ess2 <- ess %>%
mutate(region = recode(region, "SI01" = "SI0"))
ess2 <- ess %>%
mutate(domain = recode(region, "SI01" = "SI0"))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain),
domain = recode(region, "SI01" = "SI0")) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain),
domain = recode(domain, "SI01" = "SI0")) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
ess2 <- ess %>%
mutate(domain = recode(domain, "SI01" = "SI0"))
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>%
mutate(domain = recode(domain, "SI01" = "SI0")) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
ess2 <- ess %>%
mutate(domain = recode(domain, "SI01" = "SI0"))
ess2 <- ess %>%
mutate(domain = recode(domain, "SI01" = "SI0"))
ess2 <- ess %>%
mutate(domain = recode(domain, "SI01" = "SI0")) %>%
left_join(ess_w_area, by = "domain") %>%                 # merge sum of weights with ESS units
left_join(pop, by = "domain") %>% # merge region population sizes
mutate(weight = pspwght * pweight,                       # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum)              # recalibrate weights to population sample size
ess2 <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999)) %>%
mutate(domain = recode(domain, "SI01" = "SI0"))
ess <- ess %>%
left_join(ess_w_area, by = "domain") %>%    # merge sum of weights with ESS units
left_join(pop, by = "domain") %>%           # merge region population sizes
mutate(weight = pspwght * pweight,          # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum) # recalibrate weights to population sample size
comp <- ess_w_area %>%
left_join(pop, by = "domain")
View(comp)
table(ess$region)
View(pop)
View(comp)
pop <- read.csv(text = URL)
pop <- pop %>%
filter(pop$domain %in% ess$domain) %>%   # filter out areas not present in ESS
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
ess$domain
pop$domain
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
filter(pop$domain %in% ess$domain) %>%   # filter out areas not present in ESS
subset(select = c(1, 3, 2))              # reorder columns
pop2 <- pop %>%
filter(pop$domain %in% ess$domain) %>%   # filter out areas not present in ESS
ess$domain
pop2 <- pop %>%
filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop2 <- pop %>%
filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2)) %>%          # reorder columns
filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2)) %>%          # reorder columns
dply::filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2)) %>%          # reorder columns
dplyr::filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop2 <- pop %>%
filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop2 <- pop %>%
filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2)) %>%          # reorder columns
filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop2 <- pop %>%
filter(pop$domain %in% ess$domain)   # filter out areas not present in ESS
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop <- pop %>%
filter(pop$domain %in% ess$domain) # filter out areas not present in ESS
ess <- ess %>%
filter(ess$domain %in% pop$domain) # filter out areas not present in population dataset
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
ess <- ess %>%
left_join(ess_w_area, by = "domain") %>%    # merge sum of weights with ESS units
left_join(pop, by = "domain") %>%           # merge region population sizes
mutate(weight = pspwght * pweight,          # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum) # recalibrate weights to population sample size
View(pop)
pop <- as.data.frame(pop) # save as data frame
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop <- as.data.frame(pop) # save as data frame
pop <- pop %>%
filter(pop$domain %in% ess$domain) # filter out areas not present in ESS
ess <- ess %>%
filter(ess$domain %in% pop$domain) # filter out areas not present in population dataset
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
ess <- ess %>%
left_join(ess_w_area, by = "domain") %>%    # merge sum of weights with ESS units
left_join(pop, by = "domain") %>%           # merge region population sizes
mutate(weight = pspwght * pweight,          # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum) # recalibrate weights to population sample size
View(pop)
pop <- read.csv(text = URL)
ess <- import_rounds(rounds = 8, ess_email = NULL, format = NULL)
# if value of trust in police is above or equal to the mean, assign 1, otherwise 0
ess <- ess %>%
mutate(trstplc = ifelse(trstplc >= mean(trstplc, na.rm = T), 1, 0))
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
lookup <- read.csv(text = URL)
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/population.csv")
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop <- pop %>%
filter(pop$domain %in% ess$domain) # filter out areas not present in ESS
ess <- ess %>%
filter(ess$domain %in% pop$domain) # filter out areas not present in population dataset
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
ess <- ess %>%
left_join(ess_w_area, by = "domain") %>%    # merge sum of weights with ESS units
left_join(pop, by = "domain") %>%           # merge region population sizes
mutate(weight = pspwght * pweight,          # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum) # recalibrate weights to population sample size
ess <- import_rounds(rounds = 8, ess_email = NULL, format = NULL)
# if value of trust in police is above or equal to the mean, assign 1, otherwise 0
ess <- ess %>%
mutate(trstplc = ifelse(trstplc >= mean(trstplc, na.rm = T), 1, 0))
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
lookup <- read.csv(text = URL)
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/population.csv")
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
filter(pop$domain %in% ess$domain) %>%   # filter out areas not present in ESS
subset(select = c(1, 3, 2))              # reorder columns
ess <- import_rounds(rounds = 8, ess_email = NULL, format = NULL)
# if value of trust in police is above or equal to the mean, assign 1, otherwise 0
ess <- ess %>%
mutate(trstplc = ifelse(trstplc >= mean(trstplc, na.rm = T), 1, 0))
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/NUTS_lookup.csv")
lookup <- read.csv(text = URL)
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
URL <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/population.csv")
pop <- read.csv(text = URL)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2))              # reorder columns
pop <- pop %>%
filter(pop$domain %in% ess$domain) # filter out areas not present in ESS
ess <- ess %>%
filter(ess$domain %in% pop$domain) # filter out areas not present in population dataset
ess_w_area <- ess %>%
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
ess <- ess %>%
left_join(ess_w_area, by = "domain") %>%    # merge sum of weights with ESS units
left_join(pop, by = "domain") %>%           # merge region population sizes
mutate(weight = pspwght * pweight,          # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum) # recalibrate weights to population sample size
dir <- direct(y       = ess$trstplc,
dom     = ess$domain,
sweight = ess$weight,
domsize = pop[,2:3],
replace = FALSE)
library(sae)
dir <- direct(y       = ess$trstplc,
dom     = ess$domain,
sweight = ess$weight,
domsize = pop[,2:3],
replace = FALSE)
dir <- direct(y       = ess$trstplc,
dom     = ess$domain,
sweight = ess$weight,
domsize = pop[,1:3],
replace = FALSE)
View(dir)
View(ess_w_area)
View(ess)
