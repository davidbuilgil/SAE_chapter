filter(!is.na(trstplc)) # delete NAs
sample_region <- ess %>%
filter(region != 99999) %>% # filter out NAs
group_by(region) %>%        # categories based on regions
summarize(n = n())          # calculate sample size
summary(sample_region$n)
ess %>%
group_by(regunit, cntry) %>% # group by spatial scale and country
summarize(n = n())           # print sample size per country
library(RCurl)
url_lookup <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/data/NUTS_lookup.csv")
lookup <- read.csv(text = url_lookup)
ess <- ess%>%
left_join(lookup, by = c("region" = "nuts3")) %>%          # merge lookup into ESS dataset
rename(domain = nuts2) %>%                                 # rename NUTS2 variable
mutate(domain = as.character(domain),                      # convert NUTS2 into character
domain = ifelse(is.na(domain), region, domain)) %>% # copy NUTS1 data if no NUTS2 information
filter(!(domain == 99999))                                 # delete NAs
library(sae)
url_pop <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/data/population.csv")
pop <- read.csv(text = url_pop)
pop <- pop %>%
mutate(area = 1:n()) %>%                 # create numeric id value
rename("domain" = "X.U.FEFF.domain") %>% # rename region column name
subset(select = c(1, 3, 2)) %>%          # reorder columns
filter(domain %in% ess$domain)           # filter out areas not present in ESS
ess_w_area <- ess %>%
filter(domain %in% pop$domain) %>%        # filter out areas not present in population dataset
group_by(domain) %>%                      # create groups by region
summarise(w_sum = sum(pspwght * pweight)) # sum weights per region
ess <- ess %>%
filter(domain %in% pop$domain) %>%          # filter out areas not present in population dataset
left_join(ess_w_area, by = "domain") %>%    # merge sum of weights with ESS units
left_join(pop, by = "domain") %>%           # merge region population sizes
mutate(weight = pspwght * pweight,          # compute weights for cross-national analysis
weight = (weight * pop2016) / w_sum) # recalibrate weights to population sample size
dir <- direct(y       = ess$trstplc,
dom     = ess$area,
sweight = ess$weight,
domsize = pop[,2:3],
replace = FALSE)
summary(dir$Direct) # summary statistics of direct estimates
# produce boxplot of coefficients of variation
ggplot(dir, aes(x=Domain, y=CV)) +
geom_boxplot() +
ggtitle("Coefficient of Variation of direct estimates")
pop <- pop %>%
left_join(dir, by = c("area" = "Domain"))
library(eurostat)
eurostat_edu   <- search_eurostat("education") # search datasets about education
eurostat_crime <- search_eurostat("offender")  # search datasets about crime
he <- get_eurostat(id = "edat_lfs_9918")
url_covs <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/data/covs_short.csv")
covs <- read.csv(text = url_covs)
pop <- pop %>%
left_join(covs, by = "domain") # merge covariates with direct estimates
pop %>%
dplyr::select(fem_p_16, gdp_eurhab_16, robb_r_10, burg_r_10, he_p_16, medage_16) %>%
summarise_all(funs(sum(is.na(.))))
library(Hmisc)
fun_imput <- aregImpute(~ fem_p_16 + gdp_eurhab_16 + robb_r_10 + burg_r_10 + he_p_16 + medage_16,
data = pop, n.impute = 10)
imputed <- as.data.frame(impute.transcan(fun_imput, imputation = 1,
rhsImp = "mean", data = pop,
list.out = T))
pop <- pop %>%
dplyr::select(domain, area, pop2016, SampSize, Direct, SD, CV) %>%
cbind(imputed)
model <- lm(Direct ~  fem_p_16  + gdp_eurhab_16 + robb_r_10 +
burg_r_10 +  medage_16    + he_p_16,
data = pop)
summary(model)$r.squared
library(papeR)
model.sc <- lm(scale(Direct) ~  scale(fem_p_16)  + scale(gdp_eurhab_16) + scale(robb_r_10) +
scale(burg_r_10) +  scale(medage_16)    + scale(he_p_16),
data = pop)
names(model.sc$coefficients) <- c('(Intercept)' , 'Proportion females', 'GDP per person (â‚¬)',
'Robbery rate', 'Burglary rate'     , 'Median age',
'Proportion HE')
xtable(prettify(summary(model.sc)), caption = "Area-level model of trust in the police (standadized coefficients)")
eblup <- eblupFH(formula = pop$Direct    ~ pop$fem_p_16  + pop$gdp_eurhab_16 +
pop$robb_r_10 + pop$burg_r_10 + pop$medage_16 +
pop$he_p_16,
vardir  = pop$SD^2,
method  = "REML")
eblup$fit # print model results
summary(eblup$eblup) # obtain model results
pop <- pop %>%
cbind(eblup$eblup) %>% # merge data into main dataset
rename(eblup = "eblup$eblup") # change name of column
eblup_mse <- mseFH(formula = pop$Direct    ~ pop$fem_p_16  + pop$gdp_eurhab_16 +
pop$robb_r_10 + pop$burg_r_10 + pop$medage_16 +
pop$he_p_16,
vardir  = pop$SD^2,
method  = "REML")
pop <- pop %>%
cbind(eblup_mse$mse) %>% # merge data
rename(mse = "eblup_mse$mse") %>% # change name of column
mutate(rrmse = (sqrt(mse) / eblup) * 100) # compute RRMSE from MSE
ggplot(pop, aes(x=area)) +
geom_line(aes(y = CV),    color = "darkred") + # create red line of direct estimates' CV
geom_line(aes(y = rrmse), color="steelblue", linetype="twodash") # create blue line of EBLUP's RRMSE
ggplot(pop, aes(x=area)) +
geom_line(aes(y = CV),    color = "darkred") + # create red line of direct estimates' CV
geom_line(aes(y = rrmse), color="steelblue", linetype="twodash") + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("Y2", "Y1"))
ggplot(pop, aes(x=area)) +
geom_line(aes(y = CV),    color = "darkred") + # create red line of direct estimates' CV
geom_line(aes(y = rrmse), color="steelblue", linetype="twodash") + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = CV),    color = "darkred") + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse), color="steelblue", linetype="twodash") + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = CV, x = area),    color = "darkred") + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area), color="steelblue", linetype="twodash") + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = CV, x = area),    color = "darkred") + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area), color="steelblue", linetype="twodash") + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue", linetype="twodash")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(SampSize) %>%
ggplot() +
geom_line(data = pop, aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(SampSize)
pop %>%
arrange(SampSize) %>%
ggplot() +
geom_line(aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(CV) %>%
ggplot() +
geom_line(aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = CV, x = area, color = "darkred", order = desc(SampSize))) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = CV, x = area, color = "darkred", order = desc(SampSize))) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue", order = desc(SampSize))) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = reorder(SampSize, CV), x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop, aes(y = reorder(CV, SampSize), x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = reorder(pop, SampSize), aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop, aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(desc(SampSize)) %>%
ggplot()+
geom_line(aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(desc(CV)) %>%
ggplot()+
geom_line(aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop2 <- pop %>%
arrange(desc(SampSize))
View(pop2)
ggplot()+
geom_line(data = pop2, aes(y = CV, x = area, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop2, aes(y = rrmse, x = area, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop2, aes(y = CV, color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop2, aes(y = rrmse, color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
ggplot()+
geom_line(data = pop2, aes(y = CV, x = 1:nrow(pop2), color = "darkred")) + # create red line of direct estimates' CV
geom_line(data = pop2, aes(y = rrmse, x = 1:nrow(pop2), color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(desc(SampSize)) %>%
ggplot() +
geom_line(aes(y = CV, x = 1:nrow(pop2), color = "darkred")) + # create red line of direct estimates' CV
geom_line(aes(y = rrmse, x = 1:nrow(pop2), color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(desc(SampSize)) %>%
ggplot() +
geom_line(aes(y = CV, x = 1:nrow(pop), color = "darkred")) + # create red line of direct estimates' CV
geom_line(aes(y = rrmse, x = 1:nrow(pop), color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV", "rrmse"))
pop %>%
arrange(desc(SampSize)) %>%
ggplot() +
geom_line(aes(y = CV, x = 1:nrow(pop), color = "darkred")) + # create red line of direct estimates' CV
geom_line(aes(y = rrmse, x = 1:nrow(pop), color="steelblue")) + # create blue line of EBLUP's RRMSE
scale_color_discrete(name = "Legend", labels = c("CV (direct)", "RRMSE (EBLUP)")) +
ggtitle("RRMSE of direct and EBLUP estimates (ordered by area sample size)")
plot(pop$Direct, pop$eblup) # plot direct estimates against EBLUPs
cor.test(pop$Direct, pop$eblup, method = "spearman") # Spearman rank correlation
synthetic <- predict(model) # predict synthetic estimates
pop <- pop %>%
cbind(synthetic)
plot(pop$Direct, pop$synthetic) # plot synthetic estimates against EBLUPs
plot(pop$Direct, pop$eblup) # plot direct estimates against EBLUPs
cor.test(pop$Direct, pop$synthetic, method = "spearman") # Spearman rank correlation
pop <- pop %>%
mutate(res = (Direct - eblup) / sqrt(eblup$fit$refvar + SD^2))
eblup$fit
eblup$fit$refvar
pop <- pop %>%
mutate(res = (Direct - eblup) / sqrt(eblup$fit$refvar + SD^2))
eurostat_geodata_60_2016 <- NULL
data("eurostat_geodata_60_2016",
envir = environment(),
package = "eurostat")
geodata <- eurostat_geodata_60_2016 %>%
rename("Domain" = "geo") %>%
left_join(pop, by = "geo") %>%
filter(!is.na(Direct)) %>%
dplyr::select(geo, Direct, eblup)
geodata <- eurostat_geodata_60_2016 %>%
rename("Domain" = "geo") %>%
left_join(pop, by = "Domain") %>%
filter(!is.na(Direct)) %>%
dplyr::select(geo, Direct, eblup)
View(eurostat_geodata_60_2016)
geodata <- eurostat_geodata_60_2016 %>%
rename("Domain" = "geo") %>%
left_join(pop, by = "Domain")
geodata <- eurostat_geodata_60_2016 %>%
rename("Domain" = "geo")
View(geodata)
geodata <- eurostat_geodata_60_2016 %>%
rename("domain" = "geo") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct)) %>%
dplyr::select(geo, Direct, eblup)
geodata <- eurostat_geodata_60_2016 %>%
rename("domain" = "geo") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct)) %>%
dplyr::select(domain, Direct, eblup)
geodata <- eurostat_geodata_60_2016 %>%
rename("domain" = "geo") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
Dirmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (Direct)") +
geom_sf(aes(fill = Direct)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
FHmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (FH)") +
geom_sf(aes(fill = eblup)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
ggarrange(Dirmap, FHmap)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggpubr)
Dirmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (Direct)") +
geom_sf(aes(fill = Direct)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
FHmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (FH)") +
geom_sf(aes(fill = eblup)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
ggarrange(Dirmap, FHmap)
View(pop)
pop_test <- pop %>%
rename("geo" = "domain") %>%
left_join(eurostat_geodata_60_2016)
pop_test <- pop %>%
rename("geo" = "domain") %>%
left_join(eurostat_geodata_60_2016, by = "geo")
pop_test <- pop %>%
rename("geo" = "domain")
pop_test<- left_join(pop_test, eurostat_geodata_60_2016, by = "geo")
pop_test<- merge(pop_test, eurostat_geodata_60_2016, by = "geo", all.x = T)
pop_test<- merge(pop_test, eurostat_geodata_60_2016, by = "geo", all.x = TRUE)
pop_test<- merge(pop_test, geodata, by = "geo", all.x = TRUE)
pop_test <- pop
pop_test<- merge(pop_test, geodata, by = "domain", all.x = TRUE)
pop$domain %in% geodata$domain
pop2 <- pop %>%
mutate(exist= pop$domain %in% geodata$domain)
View(pop2)
library(sf)
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_3857.geojson")
View(nuts)
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_4326.geojson")
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_4326.geojson")
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_4326.geojson")
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_4326.geojson")
View(nuts)
url_nuts_codes <- getURL("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_RG_BN_60M_2013.csv")
covs <- read.csv(text = url_nuts_codes)
View(covs)
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_3857.geojson")
View(nuts)
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_3035.geojson")
# download geojson
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_3035.geojson")
View(nuts)
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_BN_60M_2013_4326.geojson")
View(nuts)
nuts@data
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3035.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3035.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3035.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3035.geojson")
View(nuts)
nuts2 <- nuts %>%
rename("domain" = "NUTS_ID")
View(nuts2)
geodata <- nuts %>%
rename("domain" = "NUTS_ID") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3857.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3857.geojson")
geodata <- nuts %>%
rename("domain" = "NUTS_ID") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
View(geodata)
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2010_3035.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2010_3035.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2010_3035.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2010_3035.geojson")
geodata <- nuts %>%
rename("domain" = "NUTS_ID") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2016_3035.geojson")
geodata <- nuts %>%
rename("domain" = "NUTS_ID") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
# download geojson
nuts_2013 <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3035.geojson")
# download geojson
nuts_2013 <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2013_3035.geojson")
nuts_2016 <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_LB_2016_3035.geojson")
View(pop2)
View(nuts_2013)
View(geodata)
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10")
View(nuts_2013b)
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11" |
NUTS_ID == "	PL12" | NUTS_ID == "PL31")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11" |
NUTS_ID == "	PL12" | NUTS_ID == "PL31" | NUTS_ID == "PL32" | NUTS_ID == "PL33" | NUTS == "PL34")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11" |
NUTS_ID == "	PL12" | NUTS_ID == "PL31" | NUTS_ID == "PL32" | NUTS_ID == "PL33" | NUTS_ID == "PL34")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11" |
NUTS_ID == "	PL12" | NUTS_ID == "PL31" | NUTS_ID == "PL32" | NUTS_ID == "PL33" | NUTS_ID == "PL34")
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11" |
NUTS_ID == "PL12" | NUTS_ID == "PL31" | NUTS_ID == "PL32" | NUTS_ID == "PL33" | NUTS_ID == "PL34")
nuts_2016b <- nuts_2016 %>%
filter(NUTS_ID %in% pop$domain)
nuts <- left_join(nuts_2016b, nuts_2013b)
nuts <- st_join(nuts_2016b, nuts_2013b)
View(nuts)
nuts <- rbind(nuts_2016b, nuts_2013b)
View(nuts_2013b)
View(nuts_2016b)
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11" |
NUTS_ID == "PL12" | NUTS_ID == "PL31" | NUTS_ID == "PL32" | NUTS_ID == "PL33" | NUTS_ID == "PL34") %>%
dplyr::select("id", "CNTR_CODE", "FID", "NUTS_ID", "LEVL_CODE")
View(nuts_2013b)
nuts_2016b <- nuts_2016 %>%
filter(NUTS_ID %in% pop$domain)  %>%
dplyr::select("id", "CNTR_CODE", "FID", "NUTS_ID", "LEVL_CODE")
nuts <- rbind(nuts_2016b, nuts_2013b)
library(RJSONIO)
install.packages("RJSONIO")
write(nuts, "NUTS_ESS_8.json")
library("rgdal")
writeOGR(nuts, "NUTS_ESS8", layer="nuts", driver="GeoJSON")
writeOGR(nuts, dsn="shapefile/NUTS_ESS8.GeoJSON", , layer="nuts", driver="GeoJSON")
library(geojsonio)
geojsonio::geojson_write(nuts, file = "/shapefile/nuts_ess8.geojson")
setwd("~/GitHub/SAE_chapter")
geojsonio::geojson_write(nuts, file = "/shapefile/nuts_ess8.geojson")
geojsonio::geojson_write(nuts, file = "shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
View(nuts)
geodata <- nuts %>%
rename("domain" = "NUTS_ID") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
Dirmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (Direct)") +
geom_sf(aes(fill = Direct)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
FHmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (FH)") +
geom_sf(aes(fill = eblup)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
ggarrange(Dirmap, FHmap)
# download geojson
nuts_2013 <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_RG_60M_2013_3035.geojson")
# download geojson
nuts_2013 <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_RG_60M_2013_3035.geojson")
# download geojson
nuts_2013 <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_RG_60M_2013_3035.geojson")
nuts_2016 <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/NUTS_RG_60M_2016_3035.geojson")
View(nuts_2013)
nuts_2013b <- nuts_2013 %>%
filter(NUTS_ID == "HU10" | NUTS_ID == "IE01" | NUTS_ID == "IE02" | NUTS_ID == "LT00" | NUTS_ID == "PL11" |
NUTS_ID == "PL12" | NUTS_ID == "PL31" | NUTS_ID == "PL32" | NUTS_ID == "PL33" | NUTS_ID == "PL34") %>%
dplyr::select("id", "CNTR_CODE", "FID", "NUTS_ID", "LEVL_CODE")
nuts_2016b <- nuts_2016 %>%
filter(NUTS_ID %in% pop$domain)  %>%
dplyr::select("id", "CNTR_CODE", "FID", "NUTS_ID", "LEVL_CODE")
nuts <- rbind(nuts_2016b, nuts_2013b)
geojsonio::geojson_write(nuts, file = "shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
nuts <- st_read("https://raw.githubusercontent.com/davidbuilgil/SAE_chapter/master/shapefile/nuts_ess8.geojson")
geodata <- nuts %>%
rename("domain" = "NUTS_ID") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
Dirmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (Direct)") +
geom_sf(aes(fill = Direct)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
FHmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (FH)") +
geom_sf(aes(fill = eblup)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
ggarrange(Dirmap, FHmap)
st_crs(nuts) <- 15752
geodata <- nuts %>%
rename("domain" = "NUTS_ID") %>%
left_join(pop, by = "domain") %>%
filter(!is.na(Direct))
Dirmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (Direct)") +
geom_sf(aes(fill = Direct)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
FHmap <- ggplot(data = geodata) +
ggtitle("Confidence in the police (FH)") +
geom_sf(aes(fill = eblup)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
ggarrange(Dirmap, FHmap)
ggplot(data = geodata) +
ggtitle("Confidence in the police (FH)") +
geom_sf(aes(fill = eblup)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
ggplot(data = geodata) +
ggtitle("Confidence in the police (EBLUP estimates)") +
geom_sf(aes(fill = eblup)) +
theme_void() +
scale_fill_viridis_c(option = "plasma")
